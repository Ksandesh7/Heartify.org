# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sx5zsi_RMYPTQerC-4J9j5s_H7dRrUt4

Importing the Dependencies
"""

import numpy as np
import pandas as pd
import pickle
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier

from sklearn.naive_bayes import GaussianNB

"""Data Collection and Processing"""

# loading the csv data to a Pandas DataFrame
heart_data = pd.read_csv('HeartAttack.csv')

# print first 5 rows of the dataset
heart_data.head()

# print last 5 rows of the dataset
heart_data.tail()

# number of rows and columns in the dataset
heart_data.shape

# getting some info about the data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

# checking the distribution of Target Variable
heart_data['target'].value_counts()

"""1 --> Defective Heart

0 --> Healthy Heart

Splitting the Features and Target
"""

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting the Data into Training data & Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

"""Building a Predictive System"""

input_data = (62,0,0,140,268,0,0,160,0,3.6,0,2,2)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')

pickle.dump(model,open('model1.pkl','wb'))
model1=pickle.load(open('model1.pkl','rb'))











"""Decision Tree"""

dt_model = DecisionTreeClassifier()
dt_model.fit(X_train, Y_train)


# accuracy on training data
X_train_prediction_dt = dt_model.predict(X_train)
training_data_accuracy_dt = accuracy_score(X_train_prediction_dt, Y_train)

print('Accuracy on Training data : ', training_data_accuracy_dt)

# accuracy on test data
X_test_prediction_dt = dt_model.predict(X_test)
test_data_accuracy_dt = accuracy_score(X_test_prediction_dt, Y_test)

print('Accuracy on Test data : ', test_data_accuracy_dt)

input_data = (57,0,1,130,236,0,0,174,0,0,1,1,2)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = dt_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')

pickle.dump(dt_model,open('model2.pkl','wb'))
model2=pickle.load(open('model2.pkl','rb'))


















"""Random Forest"""

rf_model = RandomForestClassifier()
rf_model.fit(X_train, Y_train)

# accuracy on training data
X_train_prediction_rf = rf_model.predict(X_train)
training_data_accuracy_rf = accuracy_score(X_train_prediction_rf, Y_train)
print('Accuracy on Training data : ', training_data_accuracy_rf)

# accuracy on test data
X_test_prediction_rf = dt_model.predict(X_test)
test_data_accuracy_rf = accuracy_score(X_test_prediction_rf, Y_test)
print('Accuracy on Test data : ', test_data_accuracy_rf)

input_data = (41,1,2,112,250,0,1,179,0,0,2,0,2)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = dt_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')

pickle.dump(rf_model,open('model3.pkl','wb'))
model3=pickle.load(open('model3.pkl','rb'))

















"""KNN"""

knn_model = KNeighborsClassifier(n_neighbors=3)
knn_model.fit(X_train,Y_train)

# accuracy on training data
X_train_prediction_knn = knn_model.predict(X_train)
training_data_accuracy_knn = accuracy_score(X_train_prediction_knn, Y_train)
print('Accuracy on Training data : ', training_data_accuracy_knn)

# accuracy on test data
X_test_prediction_knn = knn_model.predict(X_test)
test_data_accuracy_knn = accuracy_score(X_test_prediction_knn, Y_test)
print('Accuracy on Test data : ', test_data_accuracy_knn)

input_data = (47,1,2,138,257,0,0,156,0,0,2,0,2)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = dt_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')

pickle.dump(knn_model,open('model4.pkl','wb'))
model4=pickle.load(open('model4.pkl','rb'))











"""SVM"""

svm_model = SVC()
svm_model.fit(X_train,Y_train)

# accuracy on training data
X_train_prediction_svm = svm_model.predict(X_train)
training_data_accuracy_svm = accuracy_score(X_train_prediction_svm, Y_train)
print('Accuracy on Training data : ', training_data_accuracy_svm)

# accuracy on test data
X_test_prediction_svm = svm_model.predict(X_test)
test_data_accuracy_svm = accuracy_score(X_test_prediction_svm, Y_test)
print('Accuracy on Test data : ', test_data_accuracy_svm)

input_data = (60,1,0,125,258,0,0,141,1,2.8,1,1,3)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = dt_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')

pickle.dump(svm_model,open('model5.pkl','wb'))
model5=pickle.load(open('model5.pkl','rb'))










"""Naive Bayes"""

nb_model = GaussianNB()
nb_model.fit(X_train,Y_train)

# accuracy on training data
X_train_prediction_nb = nb_model.predict(X_train)
training_data_accuracy_nb = accuracy_score(X_train_prediction_nb, Y_train)
print('Accuracy on Training data : ', training_data_accuracy_nb)

# accuracy on test data
X_test_prediction_nb = nb_model.predict(X_test)
test_data_accuracy_nb = accuracy_score(X_test_prediction_nb, Y_test)
print('Accuracy on Test data : ', test_data_accuracy_nb)

pickle.dump(nb_model,open('model6.pkl','wb'))
model6=pickle.load(open('model6.pkl','rb'))